// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`does not add a grouping if one is already present 1`] = `
"
class A {
	constructor() {
		this.componentWillReceiveProps = nextProps => {
			console.group('one');
			console.log(this.props);
			console.log(nextProps);
		};
	}

}"
`;

exports[`does not add extra groupend just because of return 1`] = `
"
function a() {
	return;
}"
`;

exports[`maintains the hierarchy when multiple logs are encountered 1`] = `
"
function something() {
	console.group('something');

	console.log('whut');

	function another() {
		console.group('another');

		console.log('wut');
		console.groupEnd();
	}
	console.groupEnd();
}"
`;

exports[`works with a multiple log statements 1`] = `
"
function something() {
	console.group('something');

	console.log('one');
	console.log('two');
	console.log('three');
	console.log('four');
	console.groupEnd();
}"
`;

exports[`works with a multiple log statements, and a return statement 1`] = `
"
function something() {
	console.group('something');

	console.log('one');
	console.log('two');
	console.groupEnd();
	return 0;
	console.log('three');
	console.log('four');
}"
`;

exports[`works with a return statement 1`] = `
"
function something() {
	console.group('something');

	console.log('wut');
	console.groupEnd();
	return 1;
}"
`;

exports[`works with anonymous functions 1`] = `
"
const fun = function () {
	console.group('fun');

	console.log('one');
	console.groupEnd();
	return 0;
};"
`;

exports[`works with arrow functions 1`] = `
"
const fun = () => {
	console.group('fun');

	console.log('one');
	console.groupEnd();
	return 0;
};"
`;

exports[`works with class function properties 1`] = `
"
class A {
	constructor() {
		this.componentWillReceiveProps = nextProps => {
			console.group(\\"componentWillReceiveProps\\");

			console.log(this.props);
			console.log(nextProps);
			console.groupEnd();
		};
	}

}"
`;

exports[`works with class methods 1`] = `
"
class A {
	componentWillReceiveProps(nextProps) {
		console.group(\\"componentWillReceiveProps\\");

		console.log(this.props);
		console.log(nextProps);
		console.groupEnd();
	}
}"
`;

exports[`wraps console.log inside a group 1`] = `
"
function something() {
	console.group('something');

	console.log('wut');
	console.groupEnd();
}"
`;

exports[`wraps only the inner console.log inside a group 1`] = `
"
function something() {
	function another() {
		console.group('another');

		console.log('wut');
		console.groupEnd();
	}
}"
`;
