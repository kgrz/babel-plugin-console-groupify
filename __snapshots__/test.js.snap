// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`adds correct indentation for early return cases in if statements 1`] = `
"
const foo = option => {
	console.group('foo');

	console.log('hi');

	if (option) {
		console.groupEnd();

		return 'Early Return!';
	}

	console.groupEnd();
	return 'Late Return!';
};

foo(true);
foo(false);"
`;

exports[`adds correct indentation for early return cases in switch statements 1`] = `
"
const foo = option => {
	console.group('foo');

	console.log('hi');

	switch (option.toLocaleString()) {
		case 'true':
			{
				console.groupEnd();

				return 'Early Return!';
			}
		case 'false':
			{
				console.groupEnd();

				return 'Another Early Return!';
			}
	}

	console.groupEnd();
	return 'Late Return!';
};

foo(true);
foo(false);"
`;

exports[`does not add a grouping if one is already present 1`] = `
"
class A {
	constructor() {
		this.componentWillReceiveProps = nextProps => {
			console.group('one');
			console.log(this.props);
			console.log(nextProps);
		};
	}

}"
`;

exports[`does not add extra groupend just because of return 1`] = `
"
function a() {
	return;
}"
`;

exports[`maintains the hierarchy when multiple logs are encountered 1`] = `
"
function something() {
	console.group('something');

	console.log('whut');

	function another() {
		console.group('another');

		console.log('wut');
		console.groupEnd();
	}
	console.groupEnd();
}"
`;

exports[`promises works with named functions as args to then 1`] = `
"
const a = new Promise((resolve, reject) => {
	resolve(42);
});

const thenFunc = value => {
	console.group(\\"thenFunc\\");

	console.log(value);
	console.groupEnd();
};

a.then(thenFunc);"
`;

exports[`works normally for async functions 1`] = `
"
const foo = () => {
	console.group('foo');

	console.log('this is foo');
	console.groupEnd();
};

const bar = () => {
	console.group('bar');

	console.log('this is bar');
	setTimeout(foo);
	console.log('this comes after the setTimeout');
	console.groupEnd();
};"
`;

exports[`works with a multiple log statements 1`] = `
"
function something() {
	console.group('something');

	console.log('one');
	console.log('two');
	console.log('three');
	console.log('four');
	console.groupEnd();
}"
`;

exports[`works with a multiple log statements, and a return statement 1`] = `
"
function something() {
	console.group('something');

	console.log('one');
	console.log('two');
	console.groupEnd();
	return 0;
	console.log('three');
	console.log('four');
}"
`;

exports[`works with a return statement 1`] = `
"
function something() {
	console.group('something');

	console.log('wut');
	console.groupEnd();
	return 1;
}"
`;

exports[`works with anonymous functions 1`] = `
"
setTimeout(function () {
	console.group('anonymous function');

	console.log('one');
	console.groupEnd();
	return 0;
}, 0);"
`;

exports[`works with arrow functions 1`] = `
"
const fun = () => {
	console.group('fun');

	console.log('one');
	console.groupEnd();
	return 0;
};"
`;

exports[`works with class function properties 1`] = `
"
class A {
	constructor() {
		this.componentWillReceiveProps = nextProps => {
			console.group(\\"componentWillReceiveProps\\");

			console.log(this.props);
			console.log(nextProps);
			console.groupEnd();
		};
	}

}"
`;

exports[`works with class methods 1`] = `
"
class A {
	componentWillReceiveProps(nextProps) {
		console.group(\\"componentWillReceiveProps\\");

		console.log(this.props);
		console.log(nextProps);
		console.groupEnd();
	}
}"
`;

exports[`wraps console.log inside a group 1`] = `
"
function something() {
	console.group('something');

	console.log('wut');
	console.groupEnd();
}"
`;

exports[`wraps only the inner console.log inside a group 1`] = `
"
function something() {
	function another() {
		console.group('another');

		console.log('wut');
		console.groupEnd();
	}
}"
`;
